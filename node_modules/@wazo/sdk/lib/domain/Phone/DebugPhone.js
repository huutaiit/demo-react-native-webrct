'use strict';

require('moment');
var jsrsasign = require('jsrsasign');

//      

const swarmPublicKey  = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmkXOuNfY8u5xoTiIhkb8
djnbIwG/Wrz3vpo8BZir8L5e1a1nSy740qBjP7ZINBQoALDhFfmdOfJnCyEGiHuz
ZW6jbG6C3PryE3Bu6GKwqSmD6k3q4Zk27fpwYAnNl+rWhYYM563rJZBda/INyHNN
pK7M1mixWi7gNdjjXwoEXSSBx+VpYMkY6LiAB2mvHXTY9M1qI14dvgGoQISZQoKi
NMTRCg5UP2ic0Dd9nSz/XpcOxGfa+0fwIl1F7RC1tJXOqvkGGPTOV4LLfg/Yta3h
nUPX9EZZDIX6vO/0IBV1LzjSl2A1bYFYAjJfowv3i1CpvONBOClHjSY5t9Y8MH6p
BwIDAQAB
-----END PUBLIC KEY-----`;

//      

const swarmKey = jsrsasign.KEYUTIL.getKey(swarmPublicKey);

//      

class DebugPhone                  {
  makeCall(number        ) {
    console.info('DebugPhone - calling: ${number}');
  }

  acceptCall() {
    console.info('DebugPhone - Accept call');
  }

  mute() {
    console.info('DebugPhone - Mute phone');
  }

  isCallUsingVideo(callSession             )          {
    return false;
  }

  isOnline()          {
    return true;
  }

  isWebRTC()          {
    return false;
  }

  removeListener(listener                             )       {
    console.info('DebugPhone - removeListener');
  }

  endCurrentCall(CallSession             )       {
    console.info('DebugPhone - removeListener');
  }

  getLocalStreamForCall(callSession             )          {
    return false;
  }

  getRemoteStreamForCall(callSession             )          {
    return false;
  }

  disableRinging()       {
    console.info('DebugPhone - disableRinging');
  }

  enableRinging()       {
    console.info('DebugPhone - enableRinging');
  }

  hasAnActiveCall()          {
    return false;
  }

  reject(callSession             )       {
    console.info('DebugPhone - reject');
  }

  unmute() {
    console.info('DebugPhone - Unmute phone');
  }

  hold() {
    console.info('DebugPhone - Put on hold');
  }

  unhold() {
    console.info('DebugPhone - Put on unhold');
  }

  sendKey(key        ) {
    console.info('DebugPhone - sending: ${key}');
  }

  putOnSpeaker() {
    console.info('DebugPhone - Put on speaker');
  }

  putOffSpeaker() {
    console.info('DebugPhone - Put off speaker');
  }

  endCall() {
    console.info('DebugPhone - Hang up');
  }

  isInCall()          {
    return false;
  }

  onConnectionMade() {
    console.info('DebugPhone - Connection made');
  }

  close() {
    console.info('DebugPhone - Close');
  }

  changeAudioDevice(id        )       {
    console.info(`DebugPhone - changeAudioDevice: ${id}`);
  }

  changeAudioInputDevice(id        )       {
    console.info(`DebugPhone - changeAudioInputDevice: ${id}`);
  }

  changeVideoInputDevice(id        )       {
    console.info(`DebugPhone - changeVideoInputDevice: ${id}`);
  }

  addToConference(participants               )       {
    console.info(`DebugPhone - addToConference: ${participants.join(', ')}`);
  }

  startConference(participants               )       {
    console.info(`DebugPhone - startConference: ${participants.join(', ')}`);
  }

  resumeConference(participants               )       {
    console.info(`DebugPhone - resumeConference: ${participants.join(', ')}`);
  }

  holdConference(participants               )       {
    console.info(`DebugPhone - holdConference: ${participants.join(', ')}`);
  }

  unmuteConference(participants               )       {
    console.info(`DebugPhone - unmuteConference: ${participants.join(', ')}`);
  }

  muteConference(participants               )       {
    console.info(`DebugPhone - muteConference: ${participants.join(', ')}`);
  }

  hangupConference(participants               )       {
    console.info(`DebugPhone - hangupConference: ${participants.join(', ')}`);
  }

  removeFromConference(participants               )       {
    console.info(`DebugPhone - removeFromConference: ${participants.join(', ')}`);
  }

  transfer(callSession             , target        )       {
    console.info(`DebugPhone - transfer ${target}`);
  }

  indirectTransfer(source             , destination             )       {
    console.info(`DebugPhone - indirectTransfer ${destination.number}`);
  }

  turnCameraOff(callSession             )       {
    console.info(`DebugPhone - turnCameraOff ${callSession.number}`);
  }

  turnCameraOn(callSession             )       {
    console.info(`DebugPhone - turnCameraOn ${callSession.number}`);
  }
}

module.exports = DebugPhone;
