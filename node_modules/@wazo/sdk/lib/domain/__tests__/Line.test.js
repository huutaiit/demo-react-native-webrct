'use strict';

//      

var newFrom = (instance     , ToClass     ) => {
  const args = {};
  Object.getOwnPropertyNames(instance).forEach(prop => {
    args[prop] = instance[prop];
  });

  return new ToClass(args);
};

//      

                  
                  
                
             
                                               
  

                        
             
                                              
                    
  

                     
                             
                           
                          
                               
             
  

                      
             
                               
                                   
                                 
                                
  

class Line {
               

             
                               
                                  
                                
                               

  static parse(plain              )       {
    return new Line({
      id: plain.id,
      extensions: plain.extensions,
      endpointCustom: plain.endpoint_custom || null,
      endpointSccp: plain.endpoint_sccp || null,
      endpointSip: plain.endpoint_sip || null,
    });
  }

  static newFrom(profile      ) {
    return newFrom(profile, Line);
  }

  is(line      ) {
    return this.id === line.id;
  }

  hasExtension(extension        ) {
    return this.extensions.some(ext => ext.exten === extension);
  }

  constructor({ id, extensions, endpointCustom, endpointSccp, endpointSip }                = {}) {
    this.id = id;
    this.extensions = extensions;
    this.endpointCustom = endpointCustom || null;
    this.endpointSccp = endpointSccp || null;
    this.endpointSip = endpointSip || null;

    // Useful to compare instead of instanceof with minified code
    this.type = 'Line';
  }
}

//      

describe('Line domain', () => {
  it('can parse a plain line to domain', () => {
    const response = {
      id: 8,
      endpoint_sip: {
        id: 19,
        username: 'ipcor1pj',
        links: [
          {
            href: 'https://demo.wazo.community/api/confd/1.1/endpoints/sip/19',
            rel: 'endpoint_sip',
          },
        ],
      },
      endpoint_sccp: null,
      endpoint_custom: null,
      extensions: [
        {
          id: 59,
          exten: '8020',
          context: 'default',
          links: [
            {
              href: 'https://demo.wazo.community/api/confd/1.1/extensions/59',
              rel: 'extensions',
            },
          ],
        },
      ],
      links: [
        {
          href: 'https://demo.wazo.community/api/confd/1.1/lines/8',
          rel: 'lines',
        },
      ],
    };

    const line = Line.parse(response);

    expect(line).toEqual(
      new Line({
        id: 8,
        extensions: [
          {
            id: 59,
            exten: '8020',
            context: 'default',
            links: [
              {
                href: 'https://demo.wazo.community/api/confd/1.1/extensions/59',
                rel: 'extensions',
              },
            ],
          },
        ],
        endpointSip: {
          id: 19,
          links: [
            {
              href: 'https://demo.wazo.community/api/confd/1.1/endpoints/sip/19',
              rel: 'endpoint_sip',
            },
          ],
          username: 'ipcor1pj',
        },
      }),
    );
  });
});
