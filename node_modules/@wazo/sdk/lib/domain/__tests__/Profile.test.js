'use strict';

//      

var newFrom = (instance     , ToClass     ) => {
  const args = {};
  Object.getOwnPropertyNames(instance).forEach(prop => {
    args[prop] = instance[prop];
  });

  return new ToClass(args);
};

//      

                  
                  
                
             
                                               
  

                        
             
                                              
                    
  

                     
                             
                           
                          
                               
             
  

                      
             
                               
                                   
                                 
                                
  

class Line {
               

             
                               
                                  
                                
                               

  static parse(plain              )       {
    return new Line({
      id: plain.id,
      extensions: plain.extensions,
      endpointCustom: plain.endpoint_custom || null,
      endpointSccp: plain.endpoint_sccp || null,
      endpointSip: plain.endpoint_sip || null,
    });
  }

  static newFrom(profile      ) {
    return newFrom(profile, Line);
  }

  is(line      ) {
    return this.id === line.id;
  }

  hasExtension(extension        ) {
    return this.extensions.some(ext => ext.exten === extension);
  }

  constructor({ id, extensions, endpointCustom, endpointSccp, endpointSip }                = {}) {
    this.id = id;
    this.extensions = extensions;
    this.endpointCustom = endpointCustom || null;
    this.endpointSccp = endpointSccp || null;
    this.endpointSip = endpointSip || null;

    // Useful to compare instead of instanceof with minified code
    this.type = 'Line';
  }
}

//      

                 
                      
                   
  

const FORWARD_KEYS = {
  BUSY: 'busy',
  NO_ANSWER: 'noanswer',
  UNCONDITIONAL: 'unconditional',
};

                               
                      
                   
              
  

class ForwardOption {
                      
                   
              

  static parse(plain          , key        )                {
    return new ForwardOption({
      destination: plain.destination || '',
      enabled: plain.enabled,
      key,
    });
  }

  static newFrom(profile               ) {
    return newFrom(profile, ForwardOption);
  }

  constructor({ destination, enabled, key }                         = {}) {
    this.destination = destination;
    this.enabled = enabled;
    this.key = key;
  }

  setDestination(number        )                {
    this.destination = number;

    return this;
  }

  setEnabled(enabled         )                {
    this.enabled = enabled;

    return this;
  }

  is(other               ) {
    return this.key === other.key;
  }
}

//      

const LINE_STATE = {
  AVAILABLE: 'available',
  HOLDING: 'holding',
  RINGING: 'ringing',
  TALKING: 'talking',
  UNAVAILABLE: 'unavailable',
};

                        
                                              
                    
                     
                   
                    
               
                
               
                                                                                                                    
                                      
                                    
                                   
     
             
                   
                    
                   
                
             
           
                          
                       
      
               
                          
                       
      
                    
                          
                       
      
    
                               
                             
             
          
                       
      
    
                           
               
               
                 
    
  

                         
             
                    
                   
                
                     
                            
                   
                       
                                 
                         
                 
                 
                            
               
               
                 
    
                           
  

class Profile {
             
                    
                   
                
                     
                           
                   
                       
                                 
                         
                 
                                           
                 
                            
                           

  static parse(plain                 )          {
    return new Profile({
      id: plain.uuid,
      firstName: plain.firstName || plain.firstname || '',
      lastName: plain.lastName || plain.lastname || '',
      email: plain.email,
      lines: plain.lines.map(line => Line.parse(line)),
      username: plain.username,
      mobileNumber: plain.mobile_phone_number || '',
      forwards: [
        ForwardOption.parse(plain.forwards.unconditional, FORWARD_KEYS.UNCONDITIONAL),
        ForwardOption.parse(plain.forwards.noanswer, FORWARD_KEYS.NO_ANSWER),
        ForwardOption.parse(plain.forwards.busy, FORWARD_KEYS.BUSY),
      ],
      doNotDisturb: plain.services.dnd.enabled,
      subscriptionType: plain.subscription_type,
      voicemail: plain.voicemail,
      switchboards: plain.switchboards || [],
      status: '',
    });
  }

  static newFrom(profile         ) {
    return newFrom(profile, Profile);
  }

  constructor({
    id,
    firstName,
    lastName,
    email,
    lines,
    username,
    mobileNumber,
    forwards,
    doNotDisturb,
    state,
    subscriptionType,
    voicemail,
    switchboards,
    status,
    sipLines,
  }                           = {}) {
    this.id = id;
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.lines = lines;
    this.username = username;
    this.mobileNumber = mobileNumber;
    this.forwards = forwards;
    this.doNotDisturb = doNotDisturb;
    this.state = state;
    this.voicemail = voicemail;
    this.subscriptionType = subscriptionType;
    this.switchboards = switchboards;
    this.status = status;

    this.sipLines = sipLines || [];
  }

  static getLinesState(lines               ) {
    let result = LINE_STATE.UNAVAILABLE;

    // eslint-disable-next-line
    for (const line of lines) {
      if (line.state === LINE_STATE.RINGING) {
        result = LINE_STATE.RINGING;
        break;
      }

      if (line.state === LINE_STATE.TALKING) {
        result = LINE_STATE.TALKING;
        break;
      }

      if (line.state === LINE_STATE.AVAILABLE) {
        result = LINE_STATE.AVAILABLE;
      }
    }

    return result;
  }

  hasId(id        ) {
    return id === this.id;
  }

  setMobileNumber(number        ) {
    this.mobileNumber = number;

    return this;
  }

  setForwardOption(forwardOption               ) {
    const updatedForwardOptions = this.forwards.slice();
    const index = updatedForwardOptions.findIndex(forward => forward.is(forwardOption));
    updatedForwardOptions.splice(index, 1, forwardOption);

    this.forwards = updatedForwardOptions;

    return this;
  }

  setDoNotDisturb(enabled         ) {
    this.doNotDisturb = enabled;

    return this;
  }

  setState(state        ) {
    this.state = state;

    return this;
  }
}

//      

describe('Profile domain', () => {
  it('should create a new Profile from another one', () => {
    const attributes = {
      id: '123',
      firstName: 'John',
      lastName: 'Doe',
      email: 'john.doe@acme.com',
      lines: [
        new Line({ id: 9012, extensions: [{ id: 1, exten: '8000', context: 'default' }], endpoint_custom: null }),
      ],
      username: 'john.doe',
      forwards: [],
      mobileNumber: '123',
    };
    const oldProfile = new Profile(attributes);
    const newProfile = Profile.newFrom(oldProfile);

    expect(newProfile).toBeInstanceOf(Profile);
    expect(newProfile.firstName).toBe(attributes.firstName);
    expect(newProfile.email).toBe(attributes.email);
    expect(newProfile.lines[0].extensions[0].exten).toBe('8000');
  });

  it('can parse a plain profile to domain', () => {
    const plain = {
      id: 10,
      uuid: 'xxx-xxx-xxx-xx',
      firstName: 'John',
      lastName: 'Doe',
      email: 'john.doe@acme.com',
      subscription_type: 2,
      lines: [
        { id: 9012, extensions: [{ id: 1, exten: '8000', context: 'default' }], endpoint_custom: null },
        { id: 3421, extensions: [{ id: 2, exten: '9980', context: 'internal' }], endpoint_custom: null },
      ],
      username: 'john.doe',
      services: {
        dnd: {
          enabled: false,
        },
      },
      forwards: {
        busy: {
          destination: '1',
          enabled: true,
        },
        noanswer: {
          destination: '',
          enabled: false,
        },
        unconditional: {
          destination: '12',
          enabled: true,
        },
      },
      groups: [],
      language: 'FR',
      mobile_phone_number: null,
      timezone: null,
      mobileNumber: '1234',
      switchboards: [],
    };

    const profile = Profile.parse(plain);

    expect(profile).toEqual(
      new Profile({
        id: 'xxx-xxx-xxx-xx',
        firstName: 'John',
        lastName: 'Doe',
        email: 'john.doe@acme.com',
        forwards: [
          new ForwardOption({ destination: '12', enabled: true, key: FORWARD_KEYS.UNCONDITIONAL }),
          new ForwardOption({ destination: '', enabled: false, key: FORWARD_KEYS.NO_ANSWER }),
          new ForwardOption({ destination: '1', enabled: true, key: FORWARD_KEYS.BUSY }),
        ],
        lines: [
          new Line({ id: 9012, extensions: [{ id: 1, exten: '8000', context: 'default' }] }),
          new Line({ id: 3421, extensions: [{ id: 2, exten: '9980', context: 'internal' }] }),
        ],
        mobileNumber: '',
        username: 'john.doe',
        doNotDisturb: false,
        subscriptionType: 2,
        switchboards: [],
        status: '',
      }),
    );
  });
});
