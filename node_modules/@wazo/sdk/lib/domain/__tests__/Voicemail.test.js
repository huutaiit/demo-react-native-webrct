'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var moment = _interopDefault(require('moment'));

//      

var newFrom = (instance     , ToClass     ) => {
  const args = {};
  Object.getOwnPropertyNames(instance).forEach(prop => {
    args[prop] = instance[prop];
  });

  return new ToClass(args);
};

//      

                        
                         
                        
                   
             
                  
                    
  

                 
             
               
                 
                  
               
                 
                 
                                     
     
  

                           
             
             
                   
           
                 
                   
    
                    
  

class Voicemail {
               

             
             
                   
                   
           
                 
                   
    

  static parse(plain                 )            {
    return new Voicemail({
      id: plain.id,
      date: moment(plain.timestamp * 1000).toDate(),
      duration: plain.duration * 1000,
      caller: {
        name: plain.caller_id_name,
        number: plain.caller_id_num,
      },
      unread: plain.folder ? plain.folder.type === 'new' : null,
    });
  }

  static parseMany(plain          )                   {
    const plainUnread = plain.folders.filter(folder => folder.type === 'new')[0].messages;
    const plainRead = plain.folders.filter(folder => folder.type === 'old')[0].messages;

    const unread = plainUnread.map(message => Voicemail.parse(message)).map(voicemail => voicemail.makeAsUnRead());
    const read = plainRead.map(message => Voicemail.parse(message)).map(voicemail => voicemail.acknowledge());

    return [...unread, ...read];
  }

  static newFrom(profile           ) {
    return newFrom(profile, Voicemail);
  }

  constructor({ id, date, duration, caller, unread }                     = {}) {
    this.id = id;
    this.date = date;
    this.duration = duration;
    this.caller = caller;
    this.unread = unread;

    // Useful to compare instead of instanceof with minified code
    this.type = 'Voicemail';
  }

  is(other           )          {
    return other && this.id === other.id;
  }

  acknowledge() {
    this.unread = false;

    return this;
  }

  makeAsUnRead() {
    this.unread = true;

    return this;
  }

  contains(query        )          {
    if (!query) {
      return true;
    }

    return this.caller.name.toUpperCase().includes(query.toUpperCase()) || this.caller.number.includes(query);
  }
}

//      

const defaultCaller = {
  name: 'john doe',
  number: '0101010101',
};

describe('Voicemail', () => {
  it('is the same voicemail given the same id', () => {
    const voicemail = new Voicemail({ id: 'ref-abc', caller: defaultCaller, date: new Date(), duration: 0 });
    const anotherVoicemail = new Voicemail({ id: 'ref-abc', caller: defaultCaller, date: new Date(), duration: 0 });

    expect(voicemail.is(anotherVoicemail)).toBeTruthy();
  });

  it('is not the same voicemail given different ids', () => {
    const voicemail = new Voicemail({ id: 'ref-abc', caller: defaultCaller, date: new Date(), duration: 0 });
    const anotherVoicemail = new Voicemail({ id: 'ref-123', caller: defaultCaller, date: new Date(), duration: 0 });

    expect(voicemail.is(anotherVoicemail)).toBeFalsy();
  });

  it("matches when the query includes the caller's name", () => {
    const voicemail = new Voicemail({
      caller: {
        name: 'john doe',
        number: '0101010101',
      },
      date: new Date(),
      duration: 0,
      id: 'ref-1234',
    });
    const query = 'john';

    expect(voicemail.contains(query)).toBeTruthy();
  });

  it("matches when the query includes the uppercased caller's name", () => {
    const voicemail = new Voicemail({
      caller: {
        name: 'John Doe',
        number: '0101010101',
      },
      date: new Date(),
      duration: 0,
      id: 'ref-1234',
    });
    const query = 'jOHn';

    expect(voicemail.contains(query)).toBeTruthy();
  });

  it("matches when the query includes the caller's number", () => {
    const voicemail = new Voicemail({
      caller: {
        name: 'john doe',
        number: '0101010101',
      },
      date: new Date(),
      duration: 0,
      id: 'ref-1234',
    });
    const query = '010101';

    expect(voicemail.contains(query)).toBeTruthy();
  });

  describe('when parsing', () => {
    it('can convert the date to unix timestamp', () => {
      const raw = {
        duration: 5,
        timestamp: 1530823017, // Thu Jul 05 2018 16:36:57 GMT-0400 (GMT-04:00)
        id: '1530823017-00000000',
        caller_id_name: 'Cl\u00e9ment Bourgeois',
        caller_id_num: '8005',
      };

      const voicemail = Voicemail.parse(raw);

      expect(voicemail.date.toISOString()).toBe('2018-07-05T20:36:57.000Z');
    });
  });
});
