'use strict';

require('moment');
var jsrsasign = require('jsrsasign');

//      

const swarmPublicKey  = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmkXOuNfY8u5xoTiIhkb8
djnbIwG/Wrz3vpo8BZir8L5e1a1nSy740qBjP7ZINBQoALDhFfmdOfJnCyEGiHuz
ZW6jbG6C3PryE3Bu6GKwqSmD6k3q4Zk27fpwYAnNl+rWhYYM563rJZBda/INyHNN
pK7M1mixWi7gNdjjXwoEXSSBx+VpYMkY6LiAB2mvHXTY9M1qI14dvgGoQISZQoKi
NMTRCg5UP2ic0Dd9nSz/XpcOxGfa+0fwIl1F7RC1tJXOqvkGGPTOV4LLfg/Yta3h
nUPX9EZZDIX6vO/0IBV1LzjSl2A1bYFYAjJfowv3i1CpvONBOClHjSY5t9Y8MH6p
BwIDAQAB
-----END PUBLIC KEY-----`;

//      

const swarmKey = jsrsasign.KEYUTIL.getKey(swarmPublicKey);

//      
                                           

                                     
                 
                  
                         
                           
             
                    
                   
                 
                    
  

                                      
                                      
                
  

                                   
                     
                              
               
                    
                    
  

class Conference {
                    

                              

                   

                    

               

  constructor({ startTime, participants, phone, started, finished }                     ) {
    this.phone = phone;
    this.startTime = startTime;
    this.participants = participants || [];
    this.started = started || false;
    this.finished = finished || false;

    if (!started) {
      this.phone.startConference(participants);
      this.phone.resumeConference(participants);
      this.started = true;
    }
  }

  getParticipants() {
    return this.participants;
  }

  async addParticipants(newParticipants               )                      {
    await this.phone.addToConference(newParticipants);
    this.phone.resumeConference([...this.participants, ...newParticipants]);

    if (this.participants.some(participant => !participant.isMuted())) {
      this.phone.unmuteConference(newParticipants);
    } else {
      this.phone.muteConference(newParticipants);
    }

    return new Conference({
      ...this,
      participants: [...this.participants, ...newParticipants],
    });
  }

  participantHasLeft(leaver             )             {
    return new Conference({
      ...this,
      participants: this.participants.filter(participant => !participant.is(leaver)),
    });
  }

  hasParticipants() {
    return this.participants.length > 0;
  }

  mute()             {
    this.phone.muteConference(this.participants);
    return new Conference({
      ...this,
    });
  }

  unmute()             {
    this.phone.unmuteConference(this.participants);
    return new Conference({
      ...this,
    });
  }

  hold()             {
    this.phone.holdConference(this.participants);
    return new Conference({
      ...this,
    });
  }

  resume()             {
    this.phone.resumeConference(this.participants);
    return new Conference({
      ...this,
    });
  }

  hangup()             {
    this.phone.hangupConference(this.participants);
    return new Conference({
      ...this,
      finished: true,
    });
  }

  hangupParticipant(participantToHangup             ) {
    this.phone.hangupConference([participantToHangup]);
    return new Conference({
      ...this,
      participants: this.participants.filter(participant => !participant.is(participantToHangup)),
    });
  }

  removeParticipant(participantToRemove             ) {
    this.phone.removeFromConference([participantToRemove]);
    return new Conference({
      ...this,
      participants: this.participants.filter(participant => !participant.is(participantToRemove)),
    });
  }

  isOnHold() {
    return this.participants.every(participant => participant.isOnHold());
  }

  isMuted() {
    return this.participants.every(participant => participant.isMuted());
  }
}

module.exports = Conference;
