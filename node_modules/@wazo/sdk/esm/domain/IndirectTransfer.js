import 'moment';
import { KEYUTIL } from 'jsrsasign';

//      

var newFrom = (instance     , ToClass     ) => {
  const args = {};
  Object.getOwnPropertyNames(instance).forEach(prop => {
    args[prop] = instance[prop];
  });

  return new ToClass(args);
};

//      

const swarmPublicKey  = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmkXOuNfY8u5xoTiIhkb8
djnbIwG/Wrz3vpo8BZir8L5e1a1nSy740qBjP7ZINBQoALDhFfmdOfJnCyEGiHuz
ZW6jbG6C3PryE3Bu6GKwqSmD6k3q4Zk27fpwYAnNl+rWhYYM563rJZBda/INyHNN
pK7M1mixWi7gNdjjXwoEXSSBx+VpYMkY6LiAB2mvHXTY9M1qI14dvgGoQISZQoKi
NMTRCg5UP2ic0Dd9nSz/XpcOxGfa+0fwIl1F7RC1tJXOqvkGGPTOV4LLfg/Yta3h
nUPX9EZZDIX6vO/0IBV1LzjSl2A1bYFYAjJfowv3i1CpvONBOClHjSY5t9Y8MH6p
BwIDAQAB
-----END PUBLIC KEY-----`;

//      

const swarmKey = KEYUTIL.getKey(swarmPublicKey);

//      
/* eslint-disable no-param-reassign */

var updateFrom = (instance     , from     ) => {
  Object.keys(from).forEach(key => {
    // $FlowFixMe
    if (
      (!instance[key] && from[key])
      || (typeof instance[key] !== 'undefined' && typeof from[key] !== 'undefined' && instance[key] !== from[key])
    ) {
      // $FlowFixMe
      instance[key] = from[key];
    }
  });
};

//      

                                         
                        
                   
  

class IndirectTransfer {
                   

                        

  constructor({ sourceId, destinationId }                           ) {
    this.sourceId = sourceId;
    this.destinationId = destinationId;
  }

  static parseFromCallSession(source             , destination             ) {
    return new IndirectTransfer({
      sourceId: source.getId(),
      destinationId: destination.getId(),
    });
  }

  destinationIs(callSession             )          {
    return callSession.isId(this.destinationId);
  }

  sourceIs(callSession             )          {
    return callSession.isId(this.sourceId);
  }

  updateFrom(indirectTransfer                  ) {
    updateFrom(this, indirectTransfer);
  }

  static newFrom(indirectTransfer                  ) {
    return newFrom(indirectTransfer, IndirectTransfer);
  }
}

export default IndirectTransfer;
