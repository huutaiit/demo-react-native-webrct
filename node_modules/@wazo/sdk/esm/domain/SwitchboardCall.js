import 'moment';
import { KEYUTIL } from 'jsrsasign';

//      

var newFrom = (instance     , ToClass     ) => {
  const args = {};
  Object.getOwnPropertyNames(instance).forEach(prop => {
    args[prop] = instance[prop];
  });

  return new ToClass(args);
};

//      

const swarmPublicKey  = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmkXOuNfY8u5xoTiIhkb8
djnbIwG/Wrz3vpo8BZir8L5e1a1nSy740qBjP7ZINBQoALDhFfmdOfJnCyEGiHuz
ZW6jbG6C3PryE3Bu6GKwqSmD6k3q4Zk27fpwYAnNl+rWhYYM563rJZBda/INyHNN
pK7M1mixWi7gNdjjXwoEXSSBx+VpYMkY6LiAB2mvHXTY9M1qI14dvgGoQISZQoKi
NMTRCg5UP2ic0Dd9nSz/XpcOxGfa+0fwIl1F7RC1tJXOqvkGGPTOV4LLfg/Yta3h
nUPX9EZZDIX6vO/0IBV1LzjSl2A1bYFYAjJfowv3i1CpvONBOClHjSY5t9Y8MH6p
BwIDAQAB
-----END PUBLIC KEY-----`;

//      

const swarmKey = KEYUTIL.getKey(swarmPublicKey);

//      
/* eslint-disable no-param-reassign */

var updateFrom = (instance     , from     ) => {
  Object.keys(from).forEach(key => {
    // $FlowFixMe
    if (
      (!instance[key] && from[key])
      || (typeof instance[key] !== 'undefined' && typeof from[key] !== 'undefined' && instance[key] !== from[key])
    ) {
      // $FlowFixMe
      instance[key] = from[key];
    }
  });
};

//      

                                                                                                   

                                    
                                    
                           
  

                                             
                           
                         
                           
  

                                           
                       
                           
                           
  

                                 
             
                            
                        
                          
                   
                         
                
                          
                          
  

                                       
                            
                          
                            
             
                         
                   
                
                          
                          
  

class SwitchboardCall {
                       

             
                            
                        
                          
                   
                         
                
                          
                          
               

  static parse(plain                         )                  {
    return new SwitchboardCall({
      id: plain.id,
      callSession: plain.callSession || null,
      callerIdName: plain.caller_id_name || null,
      callerIdNumber: plain.caller_id_number || null,
      participantId: plain.participantId || null,
      startTime: plain.startTime,
      state: plain.state,
      switchboardName: plain.switchboardName,
      switchboardUuid: plain.switchboardUuid,
    });
  }

  constructor({
    id,
    callSession,
    callerIdName,
    callerIdNumber,
    participantId,
    startTime,
    state,
    switchboardName,
    switchboardUuid,
  }                           = {}) {
    this.id = id;
    this.callSession = callSession;
    this.callerIdName = callerIdName;
    this.callerIdNumber = callerIdNumber;
    this.participantId = participantId;
    this.startTime = startTime;
    this.state = state;
    this.switchboardName = switchboardName;
    this.switchboardUuid = switchboardUuid;

    // Useful to compare instead of instanceof with minified code
    this.type = 'SwitchboardCall';
  }

  updateFrom(switchboardCall                 ) {
    updateFrom(this, switchboardCall);
  }

  static newFrom(switchboardCall                 ) {
    return newFrom(switchboardCall, SwitchboardCall);
  }
}

SwitchboardCall.STATE = {
  INCOMING: 'incoming',
  ONGOING: 'ongoing',
  HELD: 'held',
};

export default SwitchboardCall;
