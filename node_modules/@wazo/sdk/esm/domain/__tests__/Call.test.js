import moment from 'moment';

//      

var newFrom = (instance     , ToClass     ) => {
  const args = {};
  Object.getOwnPropertyNames(instance).forEach(prop => {
    args[prop] = instance[prop];
  });

  return new ToClass(args);
};

//      

                     
                  
                      
                         
                           
                              
                                
                           
                 
                     
                        
                   
  

                      
             
                    
                    
                     
                       
                     
                       
                          
                  
                 
                     
  

class Call {
               

             
                    
                     
                       
                     
                       
                          
                    
                  
                 
                     

  static parseMany(plain                     )              {
    return plain.map((plainCall              ) => Call.parse(plainCall));
  }

  static parse(plain              )       {
    return new Call({
      id: plain.call_id,
      sipCallId: plain.sip_call_id,
      callerName: plain.caller_id_name,
      callerNumber: plain.caller_id_number,
      calleeName: plain.peer_caller_id_name,
      calleeNumber: plain.peer_caller_id_number,
      dialedExtension: plain.dialed_extension,
      isCaller: plain.is_caller,
      onHold: plain.on_hold,
      status: plain.status,
      startingTime: moment(plain.creation_time).toDate(),
    });
  }

  static newFrom(call      ) {
    return newFrom(call, Call);
  }

  constructor({
    id,
    sipCallId,
    callerName,
    callerNumber,
    calleeName,
    calleeNumber,
    dialedExtension,
    isCaller,
    onHold,
    status,
    startingTime,
  }                = {}) {
    this.id = id;
    this.sipCallId = sipCallId;
    this.callerName = callerName;
    this.callerNumber = callerNumber;
    this.calleeName = calleeName;
    this.calleeNumber = calleeNumber;
    this.dialedExtension = dialedExtension;
    this.onHold = onHold;
    this.isCaller = isCaller;
    this.status = status;
    this.startingTime = startingTime;

    // Useful to compare instead of instanceof with minified code
    this.type = 'Call';
  }

  getElapsedTimeInSeconds()         {
    const now = Date.now();
    return (now - this.startingTime) / 1000;
  }

  separateCalleeName()                                          {
    const names = this.calleeName.split(' ');
    const firstName = names[0];
    const lastName = names.slice(1).join(' ');

    return { firstName, lastName };
  }

  is(other       )          {
    return !!other && this.id === other.id;
  }

  hasACalleeName()          {
    return this.calleeName.length > 0;
  }

  hasNumber(number        )          {
    return this.calleeNumber === number;
  }

  isUp()          {
    return this.status === 'Up';
  }

  isDown()          {
    return this.status === 'Down';
  }

  isRinging()          {
    return this.isRingingIncoming() || this.isRingingOutgoing();
  }

  isRingingIncoming()          {
    return this.status === 'Ringing';
  }

  isRingingOutgoing()          {
    return this.status === 'Ring';
  }

  isFromTransfer()          {
    return this.status === 'Down' || this.status === 'Ringing';
  }

  isOnHold()          {
    return this.onHold;
  }

  putOnHold()       {
    this.onHold = true;
  }

  resume()       {
    this.onHold = false;
  }
}

describe('Call domain', () => {
  it('can return the elapsed time since its creation in seconds', () => {
    Date.now = jest.fn(() => new Date(2012, 7, 28, 13, 0, 0));
    const call = new Call({ startingTime: new Date(2012, 7, 28, 12, 30, 0) });

    const elapsedTimeInSeconds = call.getElapsedTimeInSeconds();

    expect(elapsedTimeInSeconds).toBe(30 * 60);
  });

  it('has the number provided it is the same number', () => {
    const call = new Call({ calleeName: 'John Doe', calleeNumber: '911' });

    expect(call.hasNumber('911')).toBeTruthy();
  });

  it('does not have the number provided it is a different number', () => {
    const call = new Call({ calleeName: 'John Doe', calleeNumber: '911' });

    expect(call.hasNumber('418-222-5555')).toBeFalsy();
  });
});
