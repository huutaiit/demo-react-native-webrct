//      

var newFrom = (instance     , ToClass     ) => {
  const args = {};
  Object.getOwnPropertyNames(instance).forEach(prop => {
    args[prop] = instance[prop];
  });

  return new ToClass(args);
};

//      
                                       

                        
             
                      
                   
                 
               
               
                                
                       
                 
                 
  

                         
             
                     
                   
                 
               
               
                                
                       
                 
                 
  

class SipLine {
               

             
                     
                   
                 
               
               
                                
                       
                 
                 

  static parse(plain                 )          {
    return new SipLine({
      id: plain.id,
      tenantUuid: plain.tenant_uuid,
      username: plain.username,
      secret: plain.secret,
      type: plain.type,
      host: plain.host,
      options: plain.options,
      links: plain.links,
      trunk: plain.trunk,
      line: plain.line,
    });
  }

  static newFrom(sipLine         ) {
    return newFrom(sipLine, SipLine);
  }

  is(line         ) {
    return this.id === line.id;
  }

  isWebRtc() {
    return this.options.some(option => option[0] === 'webrtc' && option[1] === 'yes');
  }

  constructor({ id, tenantUuid, username, secret, type, host, options, links, trunk, line }                   = {}) {
    this.id = id;
    this.tenantUuid = tenantUuid;
    this.username = username;
    this.secret = secret;
    this.type = type;
    this.host = host;
    this.options = options;
    this.links = links;
    this.trunk = trunk;
    this.line = line;

    // Useful to compare instead of instanceof with minified code
    this.type = 'SipLine';
  }
}

export default SipLine;
